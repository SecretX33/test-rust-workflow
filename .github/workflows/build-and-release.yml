name: Build and Release

on:
  workflow_dispatch:
    inputs:
      VERSION_TAG:
        description: 'The version tag of this release'
        default: 'snapshot'
        required: true
        type: string
  workflow_call:
    inputs:
      VERSION_TAG:
        description: 'The version tag of this release'
        default: 'snapshot'
        required: true
        type: string

env:
  CARGO_REGISTRY: https://github.com/rust-lang/crates.io-index
  CARGO_TARGET_DIR: target
  CARGO_TERM_COLOR: always

jobs:
  build_for_windows:
    runs-on: windows-latest
    name: Build for Windows
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - name: Build for Windows
        run: |
          cargo build --release --target x86_64-pc-windows-msvc

      - name: Zip binary
        run: |
          mkdir -p dist/windows
          echo "=== Release folder contents ==="
          dir target/x86_64-pc-windows-msvc/release
          echo "=== Zipping binary ==="
          tar.exe -a -c -f target/x86_64-pc-windows-msvc/release/zipsource.zip target/x86_64-pc-windows-msvc/release/zipsource.exe

      - name: Copy zipped binary
        run: cp target/x86_64-pc-windows-msvc/release/zipsource.zip dist/windows/

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ZipSource.x64.Windows.zip
          path: dist/windows/zipsource.zip
          if-no-files-found: error

  build_for_linux:
    runs-on: ubuntu-latest
    name: Build for Linux
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - name: Build for Linux
        run: |
          cargo build --release --target x86_64-unknown-linux-gnu

      - name: Zip binary
        run: |
          mkdir -p dist/linux
          echo "=== Release folder contents ==="
          ls target/x86_64-unknown-linux-gnu/release
          echo "=== Zipping binary ==="
          zip target/x86_64-unknown-linux-gnu/release/zipsource.zip target/x86_64-unknown-linux-gnu/release/zipsource

      - name: Copy zipped binary
        run: cp target/x86_64-unknown-linux-gnu/release/zipsource.zip dist/linux/

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ZipSource.x64.Linux.zip
          path: dist/linux/zipsource.zip
          if-no-files-found: error

  build_for_macos:
    runs-on: macos-latest
    name: Build for MacOS
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - name: Build for MacOS
        run: |
          cargo build --release --target x86_64-apple-darwin

      - name: Zip binary
        run: |
          mkdir -p dist/macos
          echo "=== Release folder contents ==="
          ls target/x86_64-apple-darwin/release
          echo "=== Zipping binary ==="
          zip target/x86_64-apple-darwin/release/zipsource.zip target/x86_64-apple-darwin/release/zipsource

      - name: Copy zipped binary
        run: cp target/x86_64-apple-darwin/release/zipsource.zip dist/macos/

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ZipSource.x64.MacOS.zip
          path: dist/macos/zipsource.zip
          if-no-files-found: error

  release:
    runs-on: ubuntu-latest
    needs:
      - build_for_windows
      - build_for_linux
      - build_for_macos

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: dist

      - name: List dist folder contents
        run: |
          echo "=== Dist folder content ==="
          ls dist

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ inputs.VERSION_TAG }}
          release_name: v${{ inputs.VERSION_TAG }}
          draft: false
          prerelease: false

      - name: Upload Release Asset (Windows)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist
          asset_name: dist/ZipSource.x64.Windows.zip
          asset_content_type: application/zip

      - name: Upload Release Asset (Linux)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist
          asset_name: dist/ZipSource.x64.Linux.zip
          asset_content_type: application/zip

      - name: Upload Release Asset (MacOS)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist
          asset_name: dist/ZipSource.x64.MacOS.zip
          asset_content_type: application/zip